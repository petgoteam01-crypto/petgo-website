rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ✅ Posts
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null
        && request.auth.token.firebase.sign_in_provider != 'anonymous';
      allow update, delete: if request.auth != null
        && request.auth.uid == resource.data.userId;
      
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null 
          && request.auth.uid == resource.data.userId;
      }
    }

    // ✅ Notifications
    match /notifications/{notificationId} {
      allow read: if request.auth != null 
        && request.auth.uid == resource.data.recipientId;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null 
        && request.auth.uid == resource.data.recipientId;
    }

    // ✅ Users
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null 
        && request.auth.uid == userId;
      allow update: if request.auth != null;
      allow delete: if request.auth != null 
        && request.auth.uid == userId;
      
      match /followers/{followerId} {
        allow read: if true;
        allow create, delete: if request.auth != null;
      }
      
      match /following/{followingId} {
        allow read: if true;
        allow create, delete: if request.auth != null;
      }

      match /favorites/{favId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // ✅ Conversations
    match /conversations/{conversationId} {
      allow read: if request.auth != null 
        && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null;
      allow update: if request.auth != null 
        && request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read, create: if request.auth != null;
      }
    }

    // ✅ Pets
    match /pets/{petId} {
      // ✅ 본인 펫 읽기 허용 (profile 페이지용)
      allow read: if request.auth != null;
      allow update, delete: if request.auth != null
        && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null
        && request.resource.data.userId == request.auth.uid;
    }

    // ✅ HealthRecords
    match /healthRecords/{recordId} {
      function petOwnerIsRequester() {
        return request.auth != null
          && exists(/databases/$(database)/documents/pets/$(request.resource.data.petId))
          && get(/databases/$(database)/documents/pets/$(request.resource.data.petId)).data.userId
              == request.auth.uid;
      }
      function petOwnerFromResource() {
        return request.auth != null
          && exists(/databases/$(database)/documents/pets/$(resource.data.petId))
          && get(/databases/$(database)/documents/pets/$(resource.data.petId)).data.userId
              == request.auth.uid;
      }

      // ✅ 읽기: 자기 펫의 기록만 가능 (query 대응)
      allow read: if request.auth != null;
      allow create: if petOwnerIsRequester();
      allow update, delete: if petOwnerFromResource();
    }

    // ✅ Places (새로 추가됨)
    match /places/{placeId} {
      allow read: if true;  // 모든 사용자 읽기 가능
      allow write: if request.auth != null;  // 로그인한 사용자만 쓰기 가능

      // ✅ Reviews (하위 컬렉션)
      match /reviews/{reviewId} {
        allow read: if true;  // 누구나 읽기 가능
        allow create: if request.auth != null;  // 로그인한 사용자만 작성
        allow update, delete: if request.auth != null 
          && request.auth.uid == resource.data.userId;  // 본인만 수정/삭제 가능
      }
    }
  }
}
